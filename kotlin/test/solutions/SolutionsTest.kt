package solutions

import org.junit.Test
import java.security.MessageDigest
import kotlin.test.assertEquals

class SolutionsTest {

    @Test fun p001() = assertEquals("e1edf9d1967ca96767dcc2b2d6df69f4", _001.multiplesOf3And5().md5())
    @Test fun p002() = assertEquals("4194eb91842c8e7e6df099ca73c38f28", _002.evenFibonacciNumbers().md5())
    @Test fun p003() = assertEquals("94c4dd41f9dddce696557d3717d98d82", _003.largestPrimeFactor().md5())
    @Test fun p004() = assertEquals("d4cfc27d16ea72a96b83d9bdef6ce2ec", _004.largestPalindromeProduct().md5())
    @Test fun p005() = assertEquals("bc0d0a22a7a46212135ed0ba77d22f3a", _005.smallestMultiple().md5())
    @Test fun p006() = assertEquals("867380888952c39a131fe1d832246ecc", _006.sumSquareDifference().md5())
    @Test fun p007() = assertEquals("8c32ab09ec0210af60d392e9b2009560", _007._10001stPrime().md5())
    @Test fun p008() = assertEquals("0f53ea7949d32ef24f9186207600403c", _008.largestProductInASeries().md5())
    @Test fun p009() = assertEquals("24eaa9820350012ff678de47cb85b639", _009.specialPythagoreanTriplet().md5())
    @Test fun p010() = assertEquals("d915b2a9ac8749a6b837404815f1ae25", _010.summationOfPrimes().md5())
    @Test fun p011() = assertEquals("678f5d2e1eaa42f04fa53411b4f441ac", _011.largestProductInAGrid().md5())
    @Test fun p012() = assertEquals("8091de7d285989bbfa9a2f9f3bdcc7c0", _012.highlyDivisibleTriangularNumber().md5())
    @Test fun p013() = assertEquals("361113f19fd302adc31268f8283a4f2d", _013.largeSum().md5())
    @Test fun p014() = assertEquals("5052c3765262bb2c6be537abd60b305e", _014.longestCollatzSequence().md5())
    @Test fun p015() = assertEquals("928f3957168ac592c4215dcd04e0b678", _015.latticePaths().md5())
    @Test fun p016() = assertEquals("6a5889bb0190d0211a991f47bb19a777", _016.powerDigitSum().md5())
    @Test fun p017() = assertEquals("6a979d4a9cf85135408529edc8a133d0", _017.numberLetterCounts().md5())
    @Test fun p018() = assertEquals("708f3cf8100d5e71834b1db77dfa15d6", _018.maximumPathSumI().md5())
    @Test fun p019() = assertEquals("a4a042cf4fd6bfb47701cbc8a1653ada", _019.countingSundays().md5())
    @Test fun p020() = assertEquals("443cb001c138b2561a0d90720d6ce111", _020.factorialDigitSum().md5())
    @Test fun p021() = assertEquals("51e04cd4e55e7e415bf24de9e1b0f3ff", _021.amicableNumbers().md5())
    @Test fun p022() = assertEquals("f2c9c91cb025746f781fa4db8be3983f", _022.namesScores().md5())
    @Test fun p023() = assertEquals("2c8258c0604152962f7787571511cf28", _023.nonabundantSums().md5())
    @Test fun p024() = assertEquals("7f155b45cb3f0a6e518d59ec348bff84", _024.lexicographicPermutations().md5())
    @Test fun p025() = assertEquals("a376802c0811f1b9088828288eb0d3f0", _025._1000digitFibonacciNumber().md5())
    @Test fun p026() = assertEquals("6aab1270668d8cac7cef2566a1c5f569", _026.reciprocalCycles().md5())
    @Test fun p027() = assertEquals("69d9e3218fd7abb6ff453ea96505183d", _027.quadraticPrimes().md5())
    @Test fun p028() = assertEquals("0d53425bd7c5bf9919df3718c8e49fa6", numberSpiralDiagonals().md5())
    @Test fun p029() = assertEquals("6f0ca67289d79eb35d19decbc0a08453", distinctPowers().md5())
    @Test fun p030() = assertEquals("27a1779a8a8c323a307ac8a70bc4489d", digitFifthPowers().md5())
    @Test fun p031() = assertEquals("142dfe4a33d624d2b830a9257e96726d", coinSums().md5())
    @Test fun p032() = assertEquals("100f6e37d0b0564490a2ee27eff0660d", pandigitalProducts().md5())
    @Test fun p033() = assertEquals("f899139df5e1059396431415e770c6dd", digitCancellingFractions().md5())
    @Test fun p034() = assertEquals("60803ea798a0c0dfb7f36397d8d4d772", digitFactorials().md5())
    @Test fun p035() = assertEquals("b53b3a3d6ab90ce0268229151c9bde11", circularPrimes().md5())
    @Test fun p036() = assertEquals("0e175dc2f28833885f62e7345addff03", doublebasePalindromes().md5())
    @Test fun p037() = assertEquals("cace46c61b00de1b60874936a093981d", truncatablePrimes().md5())
    @Test fun p038() = assertEquals("f2a29ede8dc9fae7926dc7a4357ac25e", pandigitalMultiples().md5())
    @Test fun p039() = assertEquals("fa83a11a198d5a7f0bf77a1987bcd006", integerRightTriangles().md5())
    @Test fun p040() = assertEquals("6f3ef77ac0e3619e98159e9b6febf557", champernownesConstant().md5())
    @Test fun p041() = assertEquals("d0a1bd6ab4229b2d0754be8923431404", pandigitalPrime().md5())
    @Test fun p042() = assertEquals("82aa4b0af34c2313a562076992e50aa3", codedTriangleNumbers().md5())
    @Test fun p043() = assertEquals("115253b7721af0fdff25cd391dfc70cf", substringDivisibility().md5())
    @Test fun p044() = assertEquals("2c2556cb85621309ca647465ffa62370", pentagonNumbers().md5())
    @Test fun p045() = assertEquals("30dfe3e3b286add9d12e493ca7be63fc", triangularPentagonalAndHexagonal().md5())
    @Test fun p046() = assertEquals("89abe98de6071178edb1b28901a8f459", goldbachsOtherConjecture().md5())
    @Test fun p047() = assertEquals("748f517ecdc29106e2738f88aa7530f4", distinctPrimesFactors().md5())
    @Test fun p048() = assertEquals("0829124724747ae1c65da8cae5263346", selfPowers().md5())
    @Test fun p049() = assertEquals("0b99933d3e2a9addccbb663d46cbb592", primePermutations().md5())
    @Test fun p050() = assertEquals("73229bab6c5dc1c7cf7a4fa123caf6bc", consecutivePrimeSum().md5())
    @Test fun p051() = assertEquals("e2a8daa5eb919905dadd795593084c22", primeDigitReplacements().md5())
    @Test fun p052() = assertEquals("a420384997c8a1a93d5a84046117c2aa", permutedMultiples().md5())
    @Test fun p053() = assertEquals("e3b21256183cf7c2c7a66be163579d37", combinatoricSelections().md5())
    @Test fun p054() = assertEquals("142949df56ea8ae0be8b5306971900a4", pokerHands().md5())
    @Test fun p055() = assertEquals("077e29b11be80ab57e1a2ecabb7da330", lychrelNumbers().md5())
    @Test fun p056() = assertEquals("c22abfa379f38b5b0411bc11fa9bf92f", powerfulDigitSum().md5())
    @Test fun p057() = assertEquals("b3e3e393c77e35a4a3f3cbd1e429b5dc", squareRootConvergents().md5())
    @Test fun p058() = assertEquals("b62fc92a2561538525c89be63f36bf7b", spiralPrimes().md5())
    @Test fun p059() = assertEquals("68f891fe214e2bfa07c998ad5d0a390f", xorDecryption().md5())
    @Test fun p060() = assertEquals("a4b5a70ca8cf24d0eb4330748d1e72e5", primePairSets().md5())
    @Test fun p061() = assertEquals("caec17d84884addeec35c3610645ab63", cyclicalFigurateNumbers().md5())
    @Test fun p062() = assertEquals("8f46b522b5401b8b6df99a7410eea44b", cubicPermutations().md5())
    @Test fun p063() = assertEquals("f457c545a9ded88f18ecee47145a72c0", powerfulDigitCounts().md5())
    @Test fun p064() = assertEquals("dc960c46c38bd16e953d97cdeefdbc68", oddPeriodSquareRoots().md5())
    @Test fun p065() = assertEquals("7a614fd06c325499f1680b9896beedeb", convergentsOfE().md5())
    @Test fun p066() = assertEquals("3a066bda8c96b9478bb0512f0a43028c", diophantineEquation().md5())
    @Test fun p067() = assertEquals("9d702ffd99ad9c70ac37e506facc8c38", maximumPathSumII().md5())
    @Test fun p068() = assertEquals("26227442c6fed0292a528ac3790175be", magic5GonRing().md5())
    @Test fun p069() = assertEquals("bf08b01ead83cbd62a9839ca1cf35ada", totientMaximum().md5())
    @Test fun p070() = assertEquals("1884dde67ced589082c8b7043abce181", totientPermutation().md5())
    @Test fun p071() = assertEquals("71f38fa2f04db30be52f883d583bfd6f", orderedFractions().md5())
    @Test fun p072() = assertEquals("0384fb529dc651fe0f460acff3e9ac5d", countingFractions().md5())
    @Test fun p073() = assertEquals("990a49eb474672444137fff1e5528a1b", countingFractionsInARange().md5())
    @Test fun p074() = assertEquals("69cb3ea317a32c4e6143e665fdb20b14", digitFactorialChains().md5())
    @Test fun p075() = assertEquals("583e391a7bd87f785412f72f486433cb", singularIntegerRightTriangles().md5())
    @Test fun p076() = assertEquals("18ed0f01e082beffe0049ae1272689d2", countingSummations().md5())
    @Test fun p077() = assertEquals("e2c420d928d4bf8ce0ff2ec19b371514", primeSummations().md5())
    @Test fun p078() = assertEquals("ef2a8695e428116131cc94c651d0e566", coinPartitions().md5())
    @Test fun p079() = assertEquals("3ccc6e16d99b21d42948f6d49b90fa30", passcodeDerivation().md5())
    @Test fun p080() = assertEquals("6cc501a25298e4051886ef1a126e9484", squareRootDigitalExpansion().md5())
    @Test fun p081() = assertEquals("f9ffec84499832add77e6a8bb00246ec", pathSumTwoWays().md5())
    @Test fun p082() = assertEquals("e6b3b1cd89b018d4754cf63863f6690a", pathSumThreeWays().md5())
    @Test fun p083() = assertEquals("61b28c4fbe8560003ee50fa5619d7a1e", pathSumFourWays().md5())
    @Test fun p084() = assertEquals("ead3264438ef83a8c2da2e98067b4445", monopolyOdds().md5())
    @Test fun p085() = assertEquals("92bf5e6240737e0326ea59846a83e076", countingRectangles().md5())
    @Test fun p086() = assertEquals("f5c3dd7514bf620a1b85450d2ae374b1", cuboidRoute().md5())
    @Test fun p087() = assertEquals("e7fb7907f1af626cc42e787e367ec602", primePowerTriples().md5())
    @Test fun p088() = assertEquals("ffde7251f43906d31534ae69fa555757", productSumNumbers().md5())

    private fun toHexString(bytes: ByteArray): String {
        val hexString = StringBuilder()
        for(b in bytes) {
            if(0xff and b.toInt() < 0x10)
                hexString.append("0" + Integer.toHexString(0xFF and b.toInt()))
            else
                hexString.append(Integer.toHexString(0xFF and b.toInt()))
        }
        return hexString.toString()
    }

    private fun md5(bytes: ByteArray) = toHexString(MessageDigest.getInstance("md5").digest(bytes))

    private fun <T> T.md5() = md5(toString().toByteArray())
}
